<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>默认成员函数那些事儿</title>
      <link href="/2024/11/03/cpp-Member%20functions/"/>
      <url>/2024/11/03/cpp-Member%20functions/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在C++中，有许多<code>默认成员函数</code>，如默认构造函数、拷贝构造函数和析构函数等。这些默认成员函数在代码中扮演着重要的角色，它们可以帮助开发者快速<code>构建对象、复制对象和释放对象</code>。然而，这些默认成员函数的使用也有一些需要注意的细节和技巧。本文将详细介绍C++中的默认成员函数，包括其作用、使用方法、注意事项和实例说明等，旨在帮助读者深入了解和掌握这些重要的语言特性，从而写出更加高效可靠的代码。</p></blockquote><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>一个类没有成员，称为<code>空类</code>。但一个空类却并不为空。<br>编译器会在其中为开发者默认生成了两大类成员函数。<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E6%88%90%E5%91%98%E5%87%BD%E6%95%B01.png'></p><p>构造函数：当<code>创建</code>一个对象时，如果没有<code>显式地</code>提供构造函数，编译器会自动生成一个默认构造函数。默认构造函数的主要功能是<code>初始化成员变量</code>，使对象能够正确地工作。</p><p>析构函数：当一个对象<code>生命周期结束</code>时，如果没有<code>显式地</code>提供析构函数，编译器会自动生成一个默认的析构函数。析构函数的主要功能是<code>释放对象占用的资源</code>，如释放动态分配的内存等。</p><p>拷贝构造函数：当一个对象要被<code>复制</code>到另一个对象中时，如果没有<code>显式地</code>提供拷贝构造函数，编译器会自动生成一个默认的拷贝构造函数。拷贝构造函数的主要功能是将一个已有对象的值复制到新的对象中。</p><p>拷贝赋值运算符：当一个对象要被<code>赋值</code>给另一个对象时，如果没有<code>显式地</code>提供拷贝赋值运算符，编译器会自动生成一个默认的拷贝赋值运算符。拷贝赋值运算符的主要功能是将一个已有对象的值赋值给另一个对象。</p><blockquote><p>如果我们在类中显式地定义了这些成员函数，则编译器不会再生成默认版本。而且，如果我们定义了其中的某一个成员函数，则最好<code>也定义其它成员函数</code>，以保证它们能够协同工作，避免出现一些难以预料的问题。</p></blockquote><p><code>取地址重载</code>也可以算作默认成员函数的成员。主要是普通对象和const对象取地址，在文章后面也会提到。</p><p>创建一个class data，作为示例。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">data</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _day;</span><br><span class="line"><span class="type">int</span> _month;</span><br><span class="line"><span class="type">int</span> _year;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>再未了解构造函数前，我们想要对类中private修饰的成员变量赋值，需要写一个函数来访问它。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date d1;</span><br><span class="line">d<span class="number">1.</span>_day = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>这样的案例是错误的，编译器报错：<code>成员不可访问</code>。因为此时的_day成员被private所修饰，只能在类里对其进行访问。<br>使用private的好处是极多的。建议将类中的<code>成员变量</code>用<code>private</code>来修饰实现封装，是因为这样能够有效地<code>保护数据，防止外部的非法访问和修改</code>，从而提高程序的安全性和可靠性。<br>封装可以做到：</p><ol><li><p>隐藏实现细节：将成员变量封装在类的私有部分，可以隐藏实现细节，避免外部直接访问和修改，从而保证数据的<code>安全性和完整性</code>。</p></li><li><p>提高代码复用性：类的成员变量只有在<code>类的内部</code>才能访问，所以可以在类的内部定义一些公共的成员函数，通过这些函数来访问和修改成员变量，从而实现代码的复用。</p></li><li><p>方便代码维护：成员变量只能通过类的公共接口来访问，所以如果需要修改成员变量或者添加新的成员变量，只需要<code>修改类的公共接口</code>，而不需要修改外部的代码。</p></li></ol><p>那么此时我们可能会采取写一个init函数来对成员变量进行初始化。这也正是<code>构造函数</code>的职能。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> day, <span class="type">int</span> month, <span class="type">int</span> year)</span> </span>&#123;</span><br><span class="line">_day = day;</span><br><span class="line">_month = month;</span><br><span class="line">_year = year;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数并不是如他的名字——去创建一个对象，而是参与了<code>对象中成员变量的初始化</code>。</p><blockquote><p>构造函数是一个特殊的函数，<code>名字与类名是相同</code>的，在创建对象时就由编译器<code>直接调用</code>，且在对象整个生命周期内<code>只调用一次</code>。</p></blockquote><p>构造函数有这样的几个特点：</p><ol><li>函数名与类名是<code>相同</code>的。比如date类的构造函数就叫date。</li><li>构造函数是<code>没有返回值</code>的。</li><li>当对象进行实例化时，编译器会<code>自动</code>调用此函数。</li><li>构造函数是可以进行重载的。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">date</span>(<span class="type">int</span> day, <span class="type">int</span> month, <span class="type">int</span> year) &#123;</span><br><span class="line">_day = day;</span><br><span class="line">_month = month;</span><br><span class="line">_year = year;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，这样就实现了两个构造函数——一个<code>有参构造</code>，一个<code>无参构造</code>。因为其支持重载，所以这样设置是没问题的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">date <span class="title">d1</span><span class="params">(<span class="number">12</span>,<span class="number">1</span>,<span class="number">2012</span>)</span></span>;  <span class="comment">//调用有参构造</span></span><br><span class="line">date d2;  <span class="comment">//调用无参构造,注意不能写成date d2()</span></span><br></pre></td></tr></table></figure><blockquote><p>当用户未进行显示定义时，编译器会<code>自动</code>生成一个<code>无参</code>构造函数。但一旦用户定义了，编译器就不会生成了。</p></blockquote><p>在c++中，类型可以被分为两种：<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E6%88%90%E5%91%98%E5%87%BD%E6%95%B02.png'></p><p>像int，double这样的类型就是内置类型，也被称作基本类型。<br>而像上面定义的date类，就被叫做自定义类型。</p><p>编译器在调用无参构造时，内置类型可能是随机值，也可能是0这样的值，这点<code>取决于编译器</code>。而自定义类型就一定会调用该类自己的<code>默认成员函数</code>。<br>我们又创建了一个类——student，并将其放在date类中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">student</span>() &#123;</span><br><span class="line">age = <span class="number">10</span>;</span><br><span class="line">name = <span class="string">&quot;chengzi&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">date</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> day, <span class="type">int</span> month, <span class="type">int</span> year)</span> </span>&#123;</span><br><span class="line">_day = day;</span><br><span class="line">_month = month;</span><br><span class="line">_year = year;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//date() &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//date(int day, int month, int year) &#123;</span></span><br><span class="line"><span class="comment">//_day = day;</span></span><br><span class="line"><span class="comment">//_month = month;</span></span><br><span class="line"><span class="comment">//_year = year;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _day;</span><br><span class="line"><span class="type">int</span> _month;</span><br><span class="line"><span class="type">int</span> _year;</span><br><span class="line">student stu;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行截图如下（vs2022）：<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E6%88%90%E5%91%98%E5%87%BD%E6%95%B03.png'><br>可以看到，虽然date的几个基本类型是随机值，但stu里带的成员变量因为<code>调用了自身的默认构造</code>，所以不是随机值。注意，调用的<code>必须</code>是默认构造也就是无参的哦。</p><p>在c++11中规定： 内置类型可以在类中声明时给出默认值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">       <span class="type">int</span> _day=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> _month=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> _year=<span class="number">1</span>;</span><br><span class="line">student stu;</span><br></pre></td></tr></table></figure><p>运行截图：<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E6%88%90%E5%91%98%E5%87%BD%E6%95%B04.png'></p><p><code>无参构造</code>和<code>全缺省</code>都被称为默认构造，但两者只能存在一个，否则编译器不知道调用哪一个。</p><h1 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h1><p>析构函数负责对象的<code>销毁</code>。<br>但析构函数不是对对象本身进行销毁，而是在编译器<code>出手销毁</code>时，作为一个强有力的工具，来帮助完成<code>对象资源</code>的清理。<br>析构函数的特征:</p><ol><li>析构函数的名就是在<code>类名</code>前加上一个<code>~</code>即可。</li><li>同样的，析构函数没有返回值。</li><li>析构函数是<code>不支持重载</code>的。</li><li>在对象生命周期结束时，由编译器亲自调用析构函数。</li></ol><p>析构函数适用于哪些情景呢？</p><ol><li>动态分配内存：当我们使用动态分配内存时，需要使用析构函数来释放这些动态分配的内存，防止<code>内存泄漏</code>。</li><li>对象销毁前的清理工作：当我们需要在对象销毁前进行一些清理工作时，可以使用析构函数来实现。例如，我们可以在析构函数中关闭对象的一些状态，保存对象的一些状态等等。</li></ol><p>所以当类中没有申请资源时，就不用写析构函数了，例如上面date类或者student类。而一旦类中进行了动态内存分配，我们就必须得自己写一个析构函数。<br>例如我们创建了一个类——stack。就必须要手动进行释放。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">stack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">stack</span>(<span class="type">int</span> capacity) &#123;</span><br><span class="line">arr = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * capacity);</span><br><span class="line">currentsize = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">stack</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (arr) &#123;</span><br><span class="line"><span class="built_in">free</span>(arr);</span><br><span class="line">arr = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span>* arr;</span><br><span class="line"><span class="type">int</span> capacity;</span><br><span class="line"><span class="type">int</span> currentsize;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同样的，默认的析构函数会调用自定义成员变量默认的析构函数（如果类中存在自定义成员变量的话）。</p><ul><li>构造顺序是按照语句的顺序进行构造，析构是按照构造的<code>相反顺序</code>进行析构。</li></ul><p>题1.函数F中，本地变量a和b的构造函数(constructor)和析构函数(destructor)的调用顺序是: ( )</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Class A;</span><br><span class="line"></span><br><span class="line">Class B;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">F</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">A a;</span><br><span class="line"></span><br><span class="line">    B b;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>答案是a构造 b构造 b析构 a析构。</p><p>题2.设已经有A,B,C,D4个类的定义，程序中A,B,C,D析构函数调用顺序为？（ ）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">C c;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">A a;</span><br><span class="line"></span><br><span class="line">B b;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> D d;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>类的析构函数调用一般按照构造函数调用的相反顺序进行调用，但是要注意static对象的存在，因为static改变了对象的生存作用域，需要等待程序结束时才会析构释放对象。</p></li><li><p><code>全局</code>对象先于<code>局部</code>对象进行构造。</p></li><li><p>局部对象按照出现的顺序进行构造，无论是否为static。</p></li><li><p>所以构造的顺序为C A B D。</p></li><li><p>析构的顺序按照构造的相反顺序析构，只需注意<code>static改变对象的生存作用域</code>之后，会放在<code>局部对象之后</code>进行析构。</p></li><li><p>因此析构顺序为B A D C。</p></li></ol><h1 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h1><p>拷贝构造适用于创建一个与<code>原对象一模一样</code>的新对象。<br>且拷贝构造是一个构造函数的<code>重载</code>，且只有<code>单个形参</code>。<br>形参必须为<code>类类型对象的引用</code>，如果使用的是传值，那么编译器会报错。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span>(<span class="type">const</span> date&amp; d) &#123;</span><br><span class="line">_day = d._day;</span><br><span class="line">_month = d._month;</span><br><span class="line">_year = d._year;</span><br><span class="line">stu = d.stu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果传递的是const date d，那么会引起<code>无限制的调用</code>。</p></blockquote><p>因为c++规定，在函数里调用自定义类型，必须要调用其<code>拷贝构造</code>来完成。因为传值通常就意味着拷贝，这点还是很好去理解的。只不过相较于内置类型的直接拷贝，自定义类型的传值拷贝稍微要麻烦一点点。</p><p>如果是传值，不就陷入了一个无穷的递归之中了吗？传值就要拷贝，拷贝就要调用拷贝构造，这不是没完没了了？<br><img src="https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E6%88%90%E5%91%98%E5%87%BD%E6%95%B05.png"></p><p>当用户未在类中设置显式定义，编译器会生成默认的拷贝构造函数。此函数可以按照字节序进行拷贝（也被称为浅拷贝）。<br>所以如果还是使用date或者student类，仍然没有必要去写一个拷贝构造函数。那换成上面的<code>stack</code>类呢？<br>答案是<code>不行</code>。<br>因为在stack类里我们定义了一个arr作为栈的<code>基址</code>。当使用浅拷贝的时候，拷贝过去的仍然是这个基址。<br>当程序准备退出时，stack1和stack2都要调用析构函数进行销毁，无论哪个对象先调用析构进行销毁，等到下一个对象要销毁时，发现arr那块空间的支配权已经还给了系统了，同时<code>多次的内存空间释放必然会造成程序崩溃</code>。<br><img src="https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E6%88%90%E5%91%98%E5%87%BD%E6%95%B06.png"><br>所以我们需要自行写一个拷贝构造函数。也就是深拷贝。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>(<span class="type">const</span> stack&amp; stack1) &#123;</span><br><span class="line">arr = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * stack<span class="number">1.</span>capacity);</span><br><span class="line"><span class="built_in">memcpy</span>(arr, stack<span class="number">1.</span>arr, <span class="built_in">sizeof</span>(<span class="type">int</span>) * stack<span class="number">1.</span>currentsize);</span><br><span class="line">capacity = stack<span class="number">1.</span>capacity;</span><br><span class="line">currentsize = stack<span class="number">1.</span>currentsize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拷贝构造的使用方式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">stack <span class="title">s2</span><span class="params">(s1)</span></span>;   <span class="comment">//s2为要拷贝的目标，s1为拷贝的原本</span></span><br></pre></td></tr></table></figure><p>总结一下构造函数的适用场景：</p><ol><li>如上所示的stack s2(s1)，利用一个<code>已存在的对象来创建新对象</code>。</li><li>函数中有<code>参数</code>为类类型的对象。如add(date d1)这个函数，调用了d1这个对象，那么在传参的过程中必然会使用到拷贝构造。</li><li>函数<code>返回值</code>有类类型对象也是同样道理。</li></ol><h1 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>运算符重载的引入是为了增强c++的代码可读性。其函数名为：<code> operator接需要重载的运算符号</code>。<br>并且在重载运算符中必须含有<code>至少一个类类型</code>的参数。</p><p>比如重载一个判断两日期是否相等的&#x3D;&#x3D;。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> date&amp; d1) &#123;</span><br><span class="line"><span class="keyword">return</span> d<span class="number">1.</span>_year == _year &amp;&amp; d<span class="number">1.</span>_month == _month &amp;&amp; d<span class="number">1.</span>_day == _day;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意： <code>::</code> ,<code>sizeof</code>,<code>?:</code>,<code> .</code>,<code> .*</code>不可被重载！</p><h2 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h2><p>赋值运算符重载是运算符重载的一种特例，它主要用于实现自定义类型的<code>深拷贝</code>。这个我们后面再说。<br>既然是赋值运算符重载，那么必然和普通的运算符重载有些许的区别，最明显的地方就在于<code>返回值</code>。<br>赋值运算符的返回值类型应该是一个<code>引用</code>，其目的是<code>支持连续赋值</code>。比如a&#x3D;b&#x3D;c，如果仍然按照上面的bool型返回，a&#x3D;b判断后返回一个true或者false，那又该如何去判断c呢？为了实现连续判断肯定会返回一个类对象的引用。<br>参数类型也常用引用，目的是为了<code>提高效率</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">date&amp; <span class="keyword">operator</span>=(<span class="type">const</span> date&amp; d1) &#123;</span><br><span class="line">_year = d<span class="number">1.</span>_year;</span><br><span class="line">_day = d<span class="number">1.</span>_day;</span><br><span class="line">_month = d<span class="number">1.</span>_month;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，*this的用法是需要重点理解的。<br>在C++中，return *this是一个<code>返回当前对象引用</code>的语句，常用于<code>实现链式调用</code>。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Class</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Class&amp; <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Class&amp; <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上面的示例中，func1()和func2()都返回MyClass类型的对象引用，因此可以在它们之间进行链式调用，如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class obj;</span><br><span class="line">obj.<span class="built_in">func1</span>().<span class="built_in">func2</span>();</span><br></pre></td></tr></table></figure><p>这样的代码能够更加简洁和易读。同时，使用return *this也可以避免出现<code>多余的对象拷贝</code>操作，提高代码的效率。*this代表着返回当前对象，return *this与date &amp;作为返回值，则代表返回引用，引用就不必经过许多繁琐的拷贝工作，也就提高了效率。</p><p>c++也规定：<code> 赋值运算重载只能是类的成员函数</code>！<br>其中比较重要的一点原因：赋值运算符是<code>作用于对象</code>上的，而对象是类的实例，因此赋值运算符必须能够访问类的私有成员，只有<code>类的成员函数才能够访问类的私有成员</code>，因此赋值运算符重载只能作为类的成员函数来定义。除此之外，赋值运算符重载还需要<code>返回一个对象的引用</code>，这个引用指向赋值后的对象。如果赋值运算符重载作为全局函数或友元函数来定义，则无法访问对象的私有成员，并且无法返回对象的引用，因此无法实现赋值运算符的重载。</p><p>当用户未显式实现时，编译器也会自动生成一个<code>默认</code>的赋值运算符重载，以值的方式<code>逐字节</code>拷贝。<br>那么如果还是date这种类，直接使用默认的即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">assignment</span><span class="params">(date&amp; d1)</span> </span>&#123;</span><br><span class="line">(*<span class="keyword">this</span>) = d1;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function">date <span class="title">d1</span><span class="params">(<span class="number">22</span>,<span class="number">22</span>,<span class="number">22</span>)</span></span>;</span><br><span class="line">date d2;</span><br><span class="line">d<span class="number">2.</span><span class="built_in">assignment</span>(d1);</span><br></pre></td></tr></table></figure><p>编译结果：<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E6%88%90%E5%91%98%E5%87%BD%E6%95%B07.png'></p><p>但要是stack这样的类就不行了。s2&#x3D;s1，将s1的内容拷贝给s2，那么s2和s1指向同一片空间不说，s2赋值后还会丢失原本的空间，导致内存泄漏，最终释放两次相同的空间也一定会造成程序崩溃。所以stack这样的类需要的是<code>深拷贝</code>。</p><blockquote><p>请牢记，只要涉及到资源管理，那么一定需要重写赋值运算符。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 赋值运算符重载，实现深拷贝  </span></span><br><span class="line">    stack&amp; <span class="keyword">operator</span>=(<span class="type">const</span> stack&amp; other) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;other) &#123;  </span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">// 处理自赋值  </span></span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 分配新资源并复制数据  </span></span><br><span class="line">        capacity = other.capacity;  </span><br><span class="line">        currentsize = other.currentsize;  </span><br><span class="line">        arr = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * capacity);  </span><br><span class="line">        std::<span class="built_in">memcpy</span>(arr, other.arr, <span class="built_in">sizeof</span>(<span class="type">int</span>) * currentsize);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="一些运算符重载示例"><a href="#一些运算符重载示例" class="headerlink" title="一些运算符重载示例"></a>一些运算符重载示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> date&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_year &lt; x._year)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (_year == x._year &amp;&amp; _month &lt; x._month)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (_year == x._year &amp;&amp; _month == x._month &amp;&amp; _day &lt; x._day)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> date&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _year == x._year</span><br><span class="line">&amp;&amp; _month == x._month</span><br><span class="line">&amp;&amp; _day == x._day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> date&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span> &lt; x || *<span class="keyword">this</span> == x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> date&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> &lt;= x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> date &amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> date&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> == x);</span><br><span class="line">&#125;</span><br><span class="line">date <span class="keyword">operator</span>+(<span class="type">int</span> day)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">date <span class="title">tmp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">tmp += day;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 前置++</span></span><br><span class="line">date&amp; <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">*<span class="keyword">this</span> += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后置++</span></span><br><span class="line"><span class="comment">// 增加这个int参数不是为了接收具体的值，仅仅是占位，跟前置++构成重载</span></span><br><span class="line">date <span class="keyword">operator</span>++(<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">date tmp = *<span class="keyword">this</span>;</span><br><span class="line">*<span class="keyword">this</span> += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于开头提到的取地址与取地址操作符重载 ,基本不会在日常生活中使用，想要了解的可以自行谷歌。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 对象 </tag>
            
            <tag> 类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（快速复习）结构体对齐与大小端</title>
      <link href="/2024/11/03/cpp-Structure%20alignment/"/>
      <url>/2024/11/03/cpp-Structure%20alignment/</url>
      
        <content type="html"><![CDATA[<h1 id="结构体对齐"><a href="#结构体对齐" class="headerlink" title="结构体对齐"></a>结构体对齐</h1><p>什么叫结构体对齐？</p><blockquote><p>结构体对齐是内存对齐的一种应用，主要是为了使结构体中的各个成员在内存中按照一定的规则排列，以符合CPU对数据访问的要求。某些CPU对于访问内存中的数据要求必须按照一定的边界对齐。没有对齐可能导致CPU<code>多次读取内存</code>，从而降低性能。内存对齐也可以简化编译器的设计，不用处理没有对齐的复杂情况。</p></blockquote><ul><li>结构体对齐基础规则</li></ul><ol><li>第一个成员在结构体变量偏移量为<code>0</code>的地址处</li><li>其他成员变量要对齐到<code>对齐数</code>的<code>整数倍</code>的地址处</li><li>对齐数 &#x3D; 编译器默认的一个对齐数 与 该成员大小的<code>较小值</code>。(VS中默认的值为8、Linux环境默认不设对齐数（对齐数是结构体成员自身的大小）)</li><li>结构体总大小为<code>最大对齐数</code>（每个成员变量都有一个对齐数）的<code>整数</code>倍</li></ol><p>看着文字可能有点懵，上个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Example</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> a;      <span class="comment">// 1 字节</span></span><br><span class="line">    <span class="type">int</span> b;       <span class="comment">// 4 字节</span></span><br><span class="line">    <span class="type">short</span> c;     <span class="comment">// 2 字节</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>a在地址0x00，占用1字节<br>为了保证b能够aligned到4字节边界(b的对齐数是4，存放地址应该是4的整数倍处)，编译器会在a和b之间添加3个填充字节<br>b在地址0x04，占用4字节<br>c(同理，c的对齐数是2，存放在2的整数倍处即可)在地址0x08，占用2字节<br>为了保证整个结构体 Example 的大小能够被最大成员（4 字节）对齐，编译器可能在末尾添加 2 个填充字节，使得结构体的大小为 12 字节</p></blockquote><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90%E4%B8%8E%E5%A4%A7%E5%B0%8F%E7%AB%AF1.png'><blockquote><p>拓展1：内存体嵌套问题</p></blockquote><p>规则： 嵌套的结构体对齐到<code>自己的最大对齐数</code>的整数倍处，结构体的整体大小就是所有最大对齐数（含嵌套结构体的对齐数）的整数倍。</p><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">double</span> a;</span><br><span class="line"><span class="type">char</span> b;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> d;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span> <span class="title">s1</span>;</span></span><br><span class="line"><span class="type">double</span> e;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结构体S1的大小为16，算错的再看看上面的例子重新算一算。S1被嵌套在S2里，那么来看看S2的内存分配情况。</p><p>char型占1字节，直接从0开始算。 S1的对齐位置应该是其最大对齐数，也就是8。整体如下：</p><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90%E4%B8%8E%E5%A4%A7%E5%B0%8F%E7%AB%AF2.png'><blockquote><p>拓展2：如何让结构体按照指定的对齐参数进行对齐?</p></blockquote><ol><li>使用 #pragma pack（C和C++）<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(push, 1)  <span class="comment">// 将当前对齐方式设置为1字节对齐，并保存之前的对齐方式  </span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PackedStruct</span> &#123;  </span><br><span class="line">    <span class="type">char</span> a;  </span><br><span class="line">    <span class="type">int</span> b;  </span><br><span class="line">    <span class="type">short</span> c;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(pop)  <span class="comment">// 恢复之前的对齐方式  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Size of PackedStruct: %zu\n&quot;</span>, <span class="built_in">sizeof</span>(PackedStruct));  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用 _<em>attribute_</em>((aligned(N)))（GCC编译器）<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AlignedStruct</span> &#123;  </span><br><span class="line">    <span class="type">char</span> a;  </span><br><span class="line">    <span class="type">int</span> b;  </span><br><span class="line">    <span class="type">short</span> c;  </span><br><span class="line">&#125; __attribute__((<span class="built_in">aligned</span>(<span class="number">16</span>)));  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Size of AlignedStruct: %zu\n&quot;</span>, <span class="built_in">sizeof</span>(AlignedStruct));  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Alignment of AlignedStruct: %zu\n&quot;</span>, __alignof__(AlignedStruct));  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>为何要采取对齐内存的策略？</li></ul><p>如果没有内存对齐机制，就意味着数据可以存放在任意的位置，若一个int变量存放在从地址2开始的四个连续的字节地址中，当cpu取数据时，就要先从0地址开始读取第一个4字节块,再剔除掉不需要的字节地址0和1,然后从地址4开始再读取下一个4字节块,也剔除不要的数据地址6和7,最后留下的两块数据再合并放入寄存器。这样就导致读内存次数增多，也就导致了工作效率的下降。同时，有些硬件平台并不支持随意地址存取，这可能会导致抛出硬件异常。</p><h1 id="大小端"><a href="#大小端" class="headerlink" title="大小端"></a>大小端</h1><blockquote><p>大小端指的是多字节数据在内存中存储时，字节的<code>排列顺序</code>。具体来说，大端（Big-endian）模式将数据的最高有效字节（MSB）存储在最低的内存地址处，而最低有效字节（LSB）存储在最高的内存地址处。相反，小端（Little-endian）模式则将数据的最低有效字节存储在最低的内存地址处，最高有效字节存储在最高的内存地址处。</p></blockquote><p>这么说肯定不太直观，结合个例子看看：<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90%E4%B8%8E%E5%A4%A7%E5%B0%8F%E7%AB%AF3.jpg'></p><p>小端存C1C2,先将C2(低位)存在地址的低位，大端则相反，C2存放在地址的高位。</p><ul><li>如何知道你的计算机是大端还是小端存储呢？</li></ul><blockquote><p>联合体（union）是一种特殊的数据结构，它允许在相同的内存位置以不同的类型来存储数据。联合体的所有成员共享同一块内存空间，这意味着它们在内存中的起始地址是相同的。</p></blockquote><p>定义一个联合体（union），该联合体包含至少两个不同类型的成员：一个整型（如int）和一个字符型（如char）。由于联合体成员共享同一块内存空间，因此可以通过<code>修改一个成员的值来观察另一个成员的变化</code>。<br>将整型成员的值设置为一个已知的、具有特定字节模式的值（如0x01020304）。<br>检查字符型成员的值。如果字符型成员的值是0x04（即整型值的最低字节），则机器是小端模式；如果字符型成员的值是0x01（即整型值的最高字节），则机器是大端模式。</p><p>在大端（Big-endian）模式下，最高有效字节（0x01）存储在最低的内存地址处，最低有效字节（0x04）存储在最高的内存地址处。<br>在小端（Little-endian）模式下，最低有效字节（0x04）存储在最低的内存地址处，最高有效字节（0x01）存储在最高的内存地址处。<br>由于字符型成员只占用一个字节，并且它与整型成员共享同一块内存，因此字符型成员将“看到”整型成员在<code>最低内存地址</code>处的那个字节的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">check_endianness</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span>  </span><br><span class="line">        <span class="type">int</span> i;  </span><br><span class="line">        <span class="type">char</span> c;  </span><br><span class="line">    &#125; test_union;  </span><br><span class="line">  </span><br><span class="line">    test_union.i = <span class="number">0x01020304</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (test_union.c == <span class="number">0x04</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Little-endian  </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// Big-endian  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">int</span> result = check_endianness();  </span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;This machine is Little-endian.\n&quot;</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;This machine is Big-endian.\n&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>大小端使用场景</li></ul><p>大端在我学习计算机网络时有涉及过，网络上传输的数据普遍采用大端模式（即网络字节序）。小端模式的设备在需要进行网络通信时，可以通过软件层面的转换来适应大端模式的数据格式。<br>然而在计算机里，还是小端用的要多一些。比较浅显的理由有这么两条：</p><ol><li>小端模式下，内存的<code>低地址</code>处存放的是数据的<code>低字节</code>。这种存储方式使得在强制转换数据类型时，不需要调整字节的内容。例如，将int类型的4字节数据强制转换为short类型的2字节数据时，可以<code>直接取int数据的前两个字节</code>（即低地址处的两个字节），因为它们刚好就是short类型所需要的最低两个字节。此外，CPU在做数值运算时，通常是从内存中依次<code>从低位到高位取数据</code>进行运算，直到最后刷新最高位的符号位。小端模式符合这种运算方式，因此可以提高运算效率。</li><li>在早期的计算机系统中，存储器的价格昂贵，且加法器的设计相对复杂。小端模式可以简化加法器的设计，因为只需要一个较低位数的加法器，然后依次从低到高循环加上所有字节即可，进位的电路相对简单。</li><li>小端模式在<code>数据扩展</code>时更加方便。例如，将16位整数扩展为32位整数时，只需在高地址处添0即可，而<code>无需移动数据</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 内存对齐 </tag>
            
            <tag> 大小端 </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++之引用</title>
      <link href="/2024/11/03/cpp-reference/"/>
      <url>/2024/11/03/cpp-reference/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言： 最近学到了c++中的引用，发现引用和c中所学到的指针有着很相似的效果，但在c++中仍然有着指针的一席之地，想必二者的适用场景是各有千秋，于是查阅资料，写了此文来方便日后复习。</p></blockquote><h1 id="引用的基本知识"><a href="#引用的基本知识" class="headerlink" title="引用的基本知识"></a>引用的基本知识</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>引用是C++中的一种<code>数据类型</code>，它是一种类似于指针的变量。引用可以被认为是一个变量的<code>别名</code>(比如你名字叫大明，外号叫小明，别人喊小明你肯定就知道是在叫你)，它提供了一种<code>访问变量</code>的方式，使得程序员可以通过<code>不同的名称来操作同一个变量</code>(喊大明小明都是在叫你)，从而简化了代码的编写。<br>引用的语法非常简单，可以通过在变量名前面加上“&amp;”符号来定义一个引用。例如，如果我们定义了一个整型变量a，可以通过以下语句来定义一个引用b：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br></pre></td></tr></table></figure><p>这样，变量b就成为了变量a的别名，它们<code>指向同一个内存地址</code>(这点非常重要)。因此，对变量b的操作也会影响到变量a。</p><h2 id="引用的适用场景"><a href="#引用的适用场景" class="headerlink" title="引用的适用场景"></a>引用的适用场景</h2><ol><li>引用必须在定义时进行<code>初始化</code>。一旦引用被初始化，它将一直指向该变量，并不能再被改变。</li><li>引用可以作为<code>函数参数</code>传递。通过引用传递参数可以避免复制大量的数据，提高程序的效率。</li><li>引用可以作为函数的<code>返回值</code>。通过引用返回值可以避免复制大量的数据，提高程序的效率。</li><li>引用可以被用来操作数组，但它的使用有一些限制。<br>这几点我会在后面进行一个详细的解释。</li></ol><h1 id="正餐"><a href="#正餐" class="headerlink" title="正餐"></a>正餐</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>人可以有多个外号，同样，一个变量也可以有多个引用。<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E5%BC%95%E7%94%A8-1.png'></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">   <span class="type">int</span>&amp; b = a;</span><br><span class="line"><span class="type">int</span>&amp; c = a;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">c = <span class="number">20</span>;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>得到的结果是10 10 20。说明了改变b与c可以影响a，且b与c指向的是<code>同一块</code>内存空间。<br>但一个引用就只可以引用一个实体。如果出现了一个<code>引用</code>引用多个实体的情况，编译器是不会放行的。<br>引用在定义时就必须<code>进行初始化</code>，这是不同于指针的一点。</p><h2 id="常引用"><a href="#常引用" class="headerlink" title="常引用"></a>常引用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>&amp; b=a;</span><br></pre></td></tr></table></figure><p>这样的例子是典型的错误。编译器给出了报错原因：<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E5%BC%95%E7%94%A8-2.png'></p><blockquote><p>在这段代码中，常量a被定义为const int类型，它的值<code>不能被修改</code>。同时，变量b被定义为int类型的引用，它指向了a的内存地址。由于a是一个常量，它的值不能被修改，因此<code>对b的任何修改都会影响到a的值</code>，这与const int类型的a所表示的<code>语义不符</code>。因此，编译器会报错，提示“invalid initialization of reference of type ‘int&amp;’ from expression of type ‘const int’”。<br>常引用在c++里通常被用作函数参数，函数返回值或者成员变量。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; a)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入的a是一个常引用，此时在函数里对a的<code>任何修改</code>都是<code>非法</code>的！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> string&amp; <span class="title">getLonger</span><span class="params">(<span class="type">const</span> string&amp; str1, <span class="type">const</span> string&amp; str2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str<span class="number">1.l</span>ength() &gt; str<span class="number">2.l</span>ength() ? str1 : str2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此函数的功能是返回较长的一个字符串，常引用作为返回值确保了字符串在返回时<code>不会被修改</code>。此外，在作类成员变量，或者遍历容器时也会有常引用的身影。</p><blockquote><p>即当既要使用引用提高程序的效率(下面讲)，又不能在函数内部修改实参的值时，可使用常引用。</p></blockquote><h2 id="引用的适用场景-1"><a href="#引用的适用场景-1" class="headerlink" title="引用的适用场景"></a>引用的适用场景</h2><h3 id="做参数"><a href="#做参数" class="headerlink" title="做参数"></a>做参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span>&amp; nums1, <span class="type">int</span>&amp; nums2)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; nums1 + nums2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面就是一个引用做参数的典型例子，其不仅在写法上更简洁，效率也是更高的。</p><ol><li>减少了数据的<code>拷贝</code><br>当使用<code>传值</code>方式时，函数会将参数的值复制一份给形参，如果参数<code>较大</code>，则会消耗较多的时间和空间。而使用引用做参数时，函数只需要<code>传入参数的地址</code>，不需要复制数据，因此可以减少数据的拷贝，提高程序的效率。</li><li>减少了内存的占用<br>当使用传值方式时，每次调用函数都需要为形参<code>分配内存空间</code>，当调用次数较多时，会占用较多的内存空间。而使用引用做参数时，只需要传递一个地址，不需要分配额外的内存空间，因此可以减少内存的占用，提高程序的效率。</li></ol><h3 id="做返回值"><a href="#做返回值" class="headerlink" title="做返回值"></a>做返回值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> nums1,<span class="type">int</span> nums2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nums1+nums2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> c=<span class="built_in">add</span>(a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个<code>传值返回</code>的传统写法，在返回时会创建一个<code>临时变量</code>，哪怕函数的栈帧已经被销毁，main里面接受的值也是从临时变量得来的，所以这种传递方式是安全的。<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/c++%E5%BC%95%E7%94%A81.png'><br>但如果返回的是一个引用，那么情况就会出现变数了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">add</span><span class="params">(<span class="type">int</span>&amp; nums1, <span class="type">int</span>&amp; nums2)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> sum = nums1 + nums2;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时int c&#x3D;add(a, b)中的c是不确定的，可能得到正确的答案，那是因为add函数栈帧还没清理，如果栈帧被清理，得到的就是个随机值了。<br>同样的，如果将接受的变量换做一个<code>引用</code>，会变得更加的不可控。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>&amp; c=<span class="built_in">add</span>(a, b);</span><br><span class="line"> cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;aaa\n&quot;</span>);</span><br><span class="line"> cout &lt;&lt; c &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>我的编译器给出的结果：</p><blockquote><p>30<br>aaa<br>-858993460</p></blockquote><p>可见在随意的调用另一个函数后，c的值发生了变化。<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/c++%E5%BC%95%E7%94%A82.png'></p><p>此时，c是指向sum的，当add函数调用完成后<code>栈帧就被销毁</code>，但此时我的编译器仍然没有清理它，销毁意味着系统将add所用的栈帧空间<code>回收</code>，但回收并不意味着数据也随之抹去，比如你今天在A201上课，放学后你离开了A201，意味着你将教室归还，当你朋友第二天来<code>A201</code>上课时，教室是存在的,只是<code>使用者被换了</code>。<br>所以这里当add调用完成后，空间还给了操作系统，操作系统又把这块空间给了printf函数来使用，自然第二次输出c就会是乱码了。因为c始终都<code>指向</code>这个位置，但<code>谁来用</code>这个位置是不确定的。</p><p>那么可以做如下的总结：</p><ol><li>几乎在任何的场景下使用<code>引用传参</code>都是可以的。</li><li>但<code>引用返回</code>是需要谨慎使用的。一不留神就使用到了错误的空间。</li><li>函数返回时，出了函数作用域，如果返回对象还<code>未归还</code>给系统，则可以使用引用返回，但如果已经将其归还给了系统，那么最好用传值返回。</li></ol><h1 id="引用和指针的区别"><a href="#引用和指针的区别" class="headerlink" title="引用和指针的区别"></a>引用和指针的区别</h1><p>看到这里，你会发现指针似乎和引用没有很大的区别，确实，就我现阶段的学习来看，二者的差别并不是很大。<br>以下是我总结的一些差别和相同的地方。<br>区别：</p><ol><li>指针可以被<code>重新赋值</code>，而引用不行。(引用在初始化后不能改变所指向的对象)</li><li>指针可以为<code>空</code>，而引用不行。</li><li>指针可以进行指针运算，而引用不行。</li><li>指针可以<code>指向空地址</code>，而引用必须指向已存在的对象。</li><li>指针可以指向同一类型的不同对象，而引用只能指向同一类型的同一对象。</li><li>引用必须在<code>定义时</code>初始化，而指针可以在任何时候进行初始化。</li><li>指针有<code>多级</code>的说法，但引用没有。</li><li>指针需要<code>解引用</code>才可以访问存储的地址，引用不用。<br>相同：</li><li>指针和引用都是用来间接访问程序中的变量。</li><li>指针和引用都可以作为函数的参数和返回值。</li></ol><p>指针和引用都可以提高程序的运行效率，因为它们避免了不必要的变量拷贝。<br>指针和引用都是C++中的两种重要的数据类型，它们在某些方面有相同之处，但也有很多区别。在使用时，需要根据具体的情况来选择使用哪种类型。例如，如果需要动态分配内存或者需要进行指针运算，则必须使用指针；而如果不需要修改变量的值，则可以使用引用，避免了指针的复杂性。</p><p>还有一点很有意思，在语法的概念上，引用就是取一个别名，是<code>没有独立的空间</code>的。但在其底层实现上实际是存在空间的，这是因为<code>引用是按照指针的形式来实现的</code>。这一点可以在反汇编代码进行查证。<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/c++%E5%BC%95%E7%94%A83.png'></p><p>可以看到反汇编代码几乎是一致的。但要深究其原理就等到以后再填坑啦。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++如何实现函数重载?</title>
      <link href="/2024/10/26/cpp-Function%20overloading/"/>
      <url>/2024/10/26/cpp-Function%20overloading/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在c++中，有一种用法，名叫<code>函数重载</code>，函数重载是c++中一个非常重要的特性，它允许程序员定义<code>同名</code>但<code>参数列表不同</code>的函数，这样可以方便地实现代码复用和提高程序的可读性。但是在学习过程中令我感到奇怪的是，C却并不支持这一做法。于是通过查阅资料，完成了此篇博客。</p></blockquote><h1 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h1><p>函数重载指的是在同一个作用域内，可以定义多个同名但参数列表不同的函数。例如：<br>如下是两个同名的add函数，功能是将两数相加并返回。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">add</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然都是add，但是它们的<code>参数列表不同</code>，一个是两个整数，一个是两个浮点数。当调用add函数时，编译器会根据实参的类型和数量来选择调用哪一个函数。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>);         <span class="comment">// 调用int add(int, int)</span></span><br><span class="line"><span class="type">double</span> y = <span class="built_in">add</span>(<span class="number">1.0</span>, <span class="number">2.0</span>);  <span class="comment">// 调用double add(double, double)</span></span><br></pre></td></tr></table></figure><p>这就是函数重载。函数重载的好处在于，可以让程序员使用同一个名字来表示多个不同的操作，这样做最浅显的好处就是给代码带来了美观。</p><p>函数重载一共有以下几种：</p><blockquote><p>参数数量不同</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">double</span> b)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>参数类型不同</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>参数顺序不同</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">double</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a, <span class="type">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>使用引用或指针</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> &amp;a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> *a)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>常量参数与非常量参数</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>不同的返回类型（仅限于与参数数量和类型不同的情况）</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a)</span></span>;</span><br></pre></td></tr></table></figure><p>重点来啦：单纯通过返回类型的不同而构成重载是不可行的，必须还有<code>参数上的区别</code>。因为这样做编译器搞不明白你究竟想要使用的是哪个函数。<br>如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>;</span><br></pre></td></tr></table></figure><p>编译器到底该调哪一个呢？</p><h1 id="c-如何支持函数重载"><a href="#c-如何支持函数重载" class="headerlink" title="c++如何支持函数重载"></a>c++如何支持函数重载</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在c&#x2F;c++中，要想将一个程序跑起来，就需要经过如下的几个阶段 </p><blockquote><p>预处理，编译，汇编，链接<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD1.jpg'><br>图源王道2025操作系统讲义3.1</p></blockquote><p><code>预处理</code>是C++程序在编译过程中的第一步，它主要负责处理头文件、宏定义和条件编译等。在预处理阶段，预处理器会对<code>函数的声明</code>进行处理，通常，此文件是以<code>.i</code>为后缀。</p><p>编译器在<code>编译</code>阶段主要负责将源代码翻译成<code>汇编</code>代码。编译器通过分析源代码，将其转换为计算机可以理解的指令。汇编语言程序中的每条语句都以一种标准的文本格式确切的描述了一条低级机器语言指令。此时，文件后缀为<code>.s</code>。</p><p>在<code>汇编</code>阶段，编译器会将<code>汇编</code>代码翻译成<code>机器</code>代码。汇编器将<code>.s文件</code>翻译成机器语言指令，把这些指令打包成一种可重定位目标程序的格式，并将结果保存在目标文件<code>.o</code>中。<code>.o</code>文件是一个二进制文件，它的字节编码是机器语言指令而不是字符，如果我们在文本文件中打开<code>.o文件</code>，所呈现的就是一串串的乱码。在汇编阶段，会生成一份<code>符号表</code>（这个表很重要,每个目标文件都有一份符号表，可简单理解为函数或变量对应的实际内存地址）。</p><p>在<code>链接</code>阶段，编译器会将多个目标文件链接成一个可执行文件。</p><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/52ca90eb6e87f4b12c4dc7a7a4a2681.jpg'>图源《计算机系统基础》-袁春风(此图在软件层并未涉及到链接)<blockquote><p>(拓展)此图给出了实现两个相邻数组元素交换功能的不同层次语言的描述 。在高级语言源程序中，可直观地用三个赋值语句实现;在经<code>编译</code>后生成的汇编语言源程序中,可用4 个汇编指令 表 示 ， 其 中 ， 两 条 是 取 数 指 令 I w (l o a d w o r d )， 另 两 条 是 存 数 指 令 s w (s t o r e w o r d ); 在 经 汇编后生成的<code>机器语言程序</code>中，对应的机器指令是特定格式的二进制代码，例如，第一条Iw指令对应的机器代码为“1000 11000100 11110000000000000000”，这是一条MIPS体系结构中的指令，其中，高6位“100011” 为操作码，随后5位“00010” 为寄存器编号2，再后面5位 “01111” 为另一个寄存器编号，最后16位表示立即数0 。CPU能够通过<code>逻辑电路</code>直接执行这种<code>二进制表示的机器指令</code>。指令执行时通过控制器对指令操作码进行译码，解释成控制信号(control signal)控制数据通路执行，例如，控制信号ALUop&#x3D; add 可以控制ALU进行加法操作，RegWr&#x3D; 1 可以控制将结果写人寄存器。</p></blockquote><p>而要解释为何c++支持函数重载，就需要说一说<code>链接</code>阶段。</p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><blockquote><p>链接过程就是将<code>多个</code>输入目标文件(.o文件)加工合并成<code>一个</code>输出文件(<code>可执行</code>二进制文件)。在此阶段，可执行的二进制文件会对一些<code>符号</code>进行解析，调整一些地址。(注意：目标文件也是二进制，但操作系统并不允许直接执行！)</p></blockquote><ul><li>重点<br>比如在编译main文件时，有一个func函数(来自func文件)的声明，但编译器完全不知道他的存在！printf也是同理，虽然有#include &lt;stdio.h&gt;，但是在此头文件里也仅仅是一个<code>函数声明</code>。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这也就意味着具体代码是什么样，或者存放在哪个内存块都是编译器目前不知道的。那么没有办法，只有先把函数的<code>跳转地址设置为0</code>，等到链接阶段再去修正。(为了找到这些要修正的函数，会生成重定位表，存放函数地址的偏移量。)</p><blockquote><p>(扩展)重定位表（Relocation Table）：重定位表保存了程序中需要进行地址重定位的信息。在编译和链接过程中，代码和数据段的实际内存地址可能还未确定，因此在生成目标文件时，编译器会记录下哪些位置<code>需要在链接时进行修改</code>。</p></blockquote><p>所以链接其实就是将多个目标文件以及一些静态库等等组合成一个可执行文件。在此过程中还会进行地址修正等工作。</p><p>接下来用一个具体的例子来解释：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.c</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">foo</span><span class="params">()</span>; <span class="comment">// 声明外部函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> foo(); <span class="comment">// 调用外部函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译时生成的总符号表：</p><table><thead><tr><th>符号</th><th>类型</th><th>地址</th></tr></thead><tbody><tr><td>foo</td><td>函数</td><td>0x1000</td></tr><tr><td>bar</td><td>函数</td><td>0x2000</td></tr></tbody></table><p>bar里的重定位表</p><table><thead><tr><th>段</th><th>偏移</th><th>符号</th><th>操作</th></tr></thead><tbody><tr><td>.text.bar</td><td>0x04</td><td>foo</td><td>重定位</td></tr></tbody></table><p>在链接阶段，链接器会通过重定位表中的信息，将 b.c 中对 foo 的调用地址修改为 foo 在内存中的实际地址（假设是 0x1000）。</p><ul><li>注意：在不同的编译和链接阶段，符号表中的地址可能会有变化，尤其是在动态链接和加载的情况下。这里只是取简单情况进行分析。具体还要结合链接方式等情况来分析。</li></ul><p>如何在符号表里找到想要的函数，就需要借助命名规则。<br>Linux下的g++的命名规则最简单，常常修饰后变成【_Z+函数长度+函数名+类型首字母】。<br>c++存在这样的<code>函数名修饰</code>规则，而c没有，这就是c++可以实现重载的关键。</p><blockquote><p>规则规定：在 c++ 中，为了支持函数重载，编译器会对每个<code>函数名</code>进行<code>修饰</code>，从而生成<code>唯一的符号</code>来标识该函数。函数名修饰规则是由编译器定义的，不同的编译器可能会采用不同的修饰规则。Microsoft Visual C++ 编译器将函数名后面加上下划线和参数个数，参数类型和参数个数之间用 @ 分隔。例如，函数 void foo(int a, float b) 的修饰名为 _foo@8。</p></blockquote><p>如：<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD4.png'></p><p>汇编阶段生成的符号表将会记录函数的<code>名称</code>与<code>地址</code>。</p><ul><li>若无函数名修饰规则，那么编译器只根据原始函数名来生成放在符号表中的函数名；如果有修饰规则，那么会将<code>形参个数，类型，顺序</code>也添加进考虑范围，以形成新的函数名。</li></ul><p>有一点需要注意，在编译的过程中，是<code>不会</code>执行用户的自定义函数的。</p><blockquote><p>在链接的阶段，链接器会解析<code>所有的符号</code>，并将被调用的函数的目标代码包含在可执行文件中。当我们在一个源文件中定义一个函数时，编译器会将该函数编译成目标代码，并在生成的目标文件中生成相应的符号。如果在其他源文件中<code>调用</code>了该函数，链接器会在链接阶段将相应的目标文件合并成一个可执行文件，并将<code>各个符号解析成实际的地址</code>，从而使得程序能够正确地执行。</p></blockquote><ul><li>所以c无法实现函数重载就是因为c没有像c++这样的修饰规则，而是仅仅以函数名来区分各函数。<img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD3.png'></li></ul><p>此时又会出现一个问题，如果在团队开发里，有人用c，有人用c++，那么此时在这种混合模式下开发，由于c和c++编译器对函数名字修饰规则不同，可能就会导致链接失败！<br>针对这样的问题，可以采取在函数前加extern “C”的办法，也就是告诉编译器将该函数按照c语言规则来编译。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 函数重载 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
