<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++之引用</title>
      <link href="/2024/11/03/cpp-reference/"/>
      <url>/2024/11/03/cpp-reference/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言： 最近学到了c++中的引用，发现引用和c中所学到的指针有着很相似的效果，但在c++中仍然有着指针的一席之地，想必二者的适用场景是各有千秋，于是查阅资料，写了此文来方便日后复习。</p></blockquote><h1 id="🍐引用的基本知识"><a href="#🍐引用的基本知识" class="headerlink" title="🍐引用的基本知识"></a>🍐引用的基本知识</h1><h2 id="🍊概念"><a href="#🍊概念" class="headerlink" title="🍊概念"></a>🍊概念</h2><blockquote><p>引用是C++中的一种<code>数据类型</code>，它是一种类似于指针的变量。引用可以被认为是一个变量的<code>别名</code>(比如你名字叫大明，外号叫小明，别人喊小明你肯定就知道是在叫你)，它提供了一种<code>访问变量</code>的方式，使得程序员可以通过<code>不同的名称来操作同一个变量</code>(喊大明小明都是在叫你)，从而简化了代码的编写。<br>引用的语法非常简单，可以通过在变量名前面加上“&amp;”符号来定义一个引用。例如，如果我们定义了一个整型变量a，可以通过以下语句来定义一个引用b：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br></pre></td></tr></table></figure><p>这样，变量b就成为了变量a的别名，它们<code>指向同一个内存地址</code>(这点非常重要)。因此，对变量b的操作也会影响到变量a。</p><h2 id="🍅引用的适用场景"><a href="#🍅引用的适用场景" class="headerlink" title="🍅引用的适用场景"></a>🍅引用的适用场景</h2><ol><li>引用必须在定义时进行<code>初始化</code>。一旦引用被初始化，它将一直指向该变量，并不能再被改变。</li><li>引用可以作为<code>函数参数</code>传递。通过引用传递参数可以避免复制大量的数据，提高程序的效率。</li><li>引用可以作为函数的<code>返回值</code>。通过引用返回值可以避免复制大量的数据，提高程序的效率。</li><li>引用可以被用来操作数组，但它的使用有一些限制。<br>这几点我会在后面进行一个详细的解释。</li></ol><h1 id="🍑正餐"><a href="#🍑正餐" class="headerlink" title="🍑正餐"></a>🍑正餐</h1><h2 id="🥑初始化"><a href="#🥑初始化" class="headerlink" title="🥑初始化"></a>🥑初始化</h2><p>人可以有多个外号，同样，一个变量也可以有多个引用。<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E5%BC%95%E7%94%A8-1.png'></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">   <span class="type">int</span>&amp; b = a;</span><br><span class="line"><span class="type">int</span>&amp; c = a;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">c = <span class="number">20</span>;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>得到的结果是10 10 20。说明了改变b与c可以影响a，且b与c指向的是<code>同一块</code>内存空间。<br>但一个引用就只可以引用一个实体。如果出现了一个<code>引用</code>引用多个实体的情况，编译器是不会放行的。<br>引用在定义时就必须<code>进行初始化</code>，这是不同于指针的一点。</p><h2 id="🍍常引用"><a href="#🍍常引用" class="headerlink" title="🍍常引用"></a>🍍常引用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>&amp; b=a;</span><br></pre></td></tr></table></figure><p>这样的例子是典型的错误。编译器给出了报错原因：<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E5%BC%95%E7%94%A8-2.png'></p><blockquote><p>在这段代码中，常量a被定义为const int类型，它的值<code>不能被修改</code>。同时，变量b被定义为int类型的引用，它指向了a的内存地址。由于a是一个常量，它的值不能被修改，因此<code>对b的任何修改都会影响到a的值</code>，这与const int类型的a所表示的<code>语义不符</code>。因此，编译器会报错，提示“invalid initialization of reference of type ‘int&amp;’ from expression of type ‘const int’”。<br>常引用在c++里通常被用作函数参数，函数返回值或者成员变量。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; a)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入的a是一个常引用，此时在函数里对a的<code>任何修改</code>都是<code>非法</code>的！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> string&amp; <span class="title">getLonger</span><span class="params">(<span class="type">const</span> string&amp; str1, <span class="type">const</span> string&amp; str2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str<span class="number">1.l</span>ength() &gt; str<span class="number">2.l</span>ength() ? str1 : str2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此函数的功能是返回较长的一个字符串，常引用作为返回值确保了字符串在返回时<code>不会被修改</code>。此外，在作类成员变量，或者遍历容器时也会有常引用的身影。</p><blockquote><p>即当既要使用引用提高程序的效率(下面讲)，又不能在函数内部修改实参的值时，可使用常引用。</p></blockquote><h2 id="🍇引用的适用场景"><a href="#🍇引用的适用场景" class="headerlink" title="🍇引用的适用场景"></a>🍇引用的适用场景</h2><h3 id="🌰做参数"><a href="#🌰做参数" class="headerlink" title="🌰做参数"></a>🌰做参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span>&amp; nums1, <span class="type">int</span>&amp; nums2)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; nums1 + nums2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面就是一个引用做参数的典型例子，其不仅在写法上更简洁，效率也是更高的。</p><ol><li>减少了数据的<code>拷贝</code><br>当使用<code>传值</code>方式时，函数会将参数的值复制一份给形参，如果参数<code>较大</code>，则会消耗较多的时间和空间。而使用引用做参数时，函数只需要<code>传入参数的地址</code>，不需要复制数据，因此可以减少数据的拷贝，提高程序的效率。</li><li>减少了内存的占用<br>当使用传值方式时，每次调用函数都需要为形参<code>分配内存空间</code>，当调用次数较多时，会占用较多的内存空间。而使用引用做参数时，只需要传递一个地址，不需要分配额外的内存空间，因此可以减少内存的占用，提高程序的效率。</li></ol><h3 id="🥐做返回值"><a href="#🥐做返回值" class="headerlink" title="🥐做返回值"></a>🥐做返回值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> nums1,<span class="type">int</span> nums2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nums1+nums2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> c=<span class="built_in">add</span>(a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个<code>传值返回</code>的传统写法，在返回时会创建一个<code>临时变量</code>，哪怕函数的栈帧已经被销毁，main里面接受的值也是从临时变量得来的，所以这种传递方式是安全的。<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/c++%E5%BC%95%E7%94%A81.png'><br>但如果返回的是一个引用，那么情况就会出现变数了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">add</span><span class="params">(<span class="type">int</span>&amp; nums1, <span class="type">int</span>&amp; nums2)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> sum = nums1 + nums2;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时int c&#x3D;add(a, b)中的c是不确定的，可能得到正确的答案，那是因为add函数栈帧还没清理，如果栈帧被清理，得到的就是个随机值了。<br>同样的，如果将接受的变量换做一个<code>引用</code>，会变得更加的不可控。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>&amp; c=<span class="built_in">add</span>(a, b);</span><br><span class="line"> cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;aaa\n&quot;</span>);</span><br><span class="line"> cout &lt;&lt; c &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>我的编译器给出的结果：</p><blockquote><p>30<br>aaa<br>-858993460</p></blockquote><p>可见在随意的调用另一个函数后，c的值发生了变化。<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/c++%E5%BC%95%E7%94%A82.png'></p><p>此时，c是指向sum的，当add函数调用完成后<code>栈帧就被销毁</code>，但此时我的编译器仍然没有清理它，销毁意味着系统将add所用的栈帧空间<code>回收</code>，但回收并不意味着数据也随之抹去，比如你今天在A201上课，放学后你离开了A201，意味着你将教室归还，当你朋友第二天来<code>A201</code>上课时，教室是存在的,只是<code>使用者被换了</code>。<br>所以这里当add调用完成后，空间还给了操作系统，操作系统又把这块空间给了printf函数来使用，自然第二次输出c就会是乱码了。因为c始终都<code>指向</code>这个位置，但<code>谁来用</code>这个位置是不确定的。</p><p>那么可以做如下的总结：</p><ol><li>几乎在任何的场景下使用<code>引用传参</code>都是可以的。</li><li>但<code>引用返回</code>是需要谨慎使用的。一不留神就使用到了错误的空间。</li><li>函数返回时，出了函数作用域，如果返回对象还<code>未归还</code>给系统，则可以使用引用返回，但如果已经将其归还给了系统，那么最好用传值返回。</li></ol><h1 id="🌽引用和指针的区别"><a href="#🌽引用和指针的区别" class="headerlink" title="🌽引用和指针的区别"></a>🌽引用和指针的区别</h1><p>看到这里，你会发现指针似乎和引用没有很大的区别，确实，就我现阶段的学习来看，二者的差别并不是很大。<br>以下是我总结的一些差别和相同的地方。<br>区别：</p><ol><li>指针可以被<code>重新赋值</code>，而引用不行。(引用在初始化后不能改变所指向的对象)</li><li>指针可以为<code>空</code>，而引用不行。</li><li>指针可以进行指针运算，而引用不行。</li><li>指针可以<code>指向空地址</code>，而引用必须指向已存在的对象。</li><li>指针可以指向同一类型的不同对象，而引用只能指向同一类型的同一对象。</li><li>引用必须在<code>定义时</code>初始化，而指针可以在任何时候进行初始化。</li><li>指针有<code>多级</code>的说法，但引用没有。</li><li>指针需要<code>解引用</code>才可以访问存储的地址，引用不用。<br>相同：</li><li>指针和引用都是用来间接访问程序中的变量。</li><li>指针和引用都可以作为函数的参数和返回值。</li></ol><p>指针和引用都可以提高程序的运行效率，因为它们避免了不必要的变量拷贝。<br>指针和引用都是C++中的两种重要的数据类型，它们在某些方面有相同之处，但也有很多区别。在使用时，需要根据具体的情况来选择使用哪种类型。例如，如果需要动态分配内存或者需要进行指针运算，则必须使用指针；而如果不需要修改变量的值，则可以使用引用，避免了指针的复杂性。</p><p>还有一点很有意思，在语法的概念上，引用就是取一个别名，是<code>没有独立的空间</code>的。但在其底层实现上实际是存在空间的，这是因为<code>引用是按照指针的形式来实现的</code>。这一点可以在反汇编代码进行查证。<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/c++%E5%BC%95%E7%94%A83.png'></p><p>可以看到反汇编代码几乎是一致的。但要深究其原理就等到以后再填坑啦。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(test)hello world</title>
      <link href="/2024/10/27/1/"/>
      <url>/2024/10/27/1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++如何实现函数重载?</title>
      <link href="/2024/10/26/cpp-Function%20overloading/"/>
      <url>/2024/10/26/cpp-Function%20overloading/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在c++中，有一种用法，名叫<code>函数重载</code>，函数重载是c++中一个非常重要的特性，它允许程序员定义<code>同名</code>但<code>参数列表不同</code>的函数，这样可以方便地实现代码复用和提高程序的可读性。但是在学习过程中令我感到奇怪的是，C却并不支持这一做法。于是通过查阅资料，完成了此篇博客。</p></blockquote><h1 id="🐶函数重载"><a href="#🐶函数重载" class="headerlink" title="🐶函数重载"></a>🐶函数重载</h1><p>函数重载指的是在同一个作用域内，可以定义多个同名但参数列表不同的函数。例如：<br>如下是两个同名的add函数，功能是将两数相加并返回。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">add</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然都是add，但是它们的<code>参数列表不同</code>，一个是两个整数，一个是两个浮点数。当调用add函数时，编译器会根据实参的类型和数量来选择调用哪一个函数。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>);         <span class="comment">// 调用int add(int, int)</span></span><br><span class="line"><span class="type">double</span> y = <span class="built_in">add</span>(<span class="number">1.0</span>, <span class="number">2.0</span>);  <span class="comment">// 调用double add(double, double)</span></span><br></pre></td></tr></table></figure><p>这就是函数重载。函数重载的好处在于，可以让程序员使用同一个名字来表示多个不同的操作，这样做最浅显的好处就是给代码带来了美观。</p><p>函数重载一共有以下几种：</p><blockquote><p>参数数量不同</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">double</span> b)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>参数类型不同</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>参数顺序不同</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">double</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a, <span class="type">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>使用引用或指针</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> &amp;a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> *a)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>常量参数与非常量参数</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>不同的返回类型（仅限于与参数数量和类型不同的情况）</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a)</span></span>;</span><br></pre></td></tr></table></figure><p>重点来啦：单纯通过返回类型的不同而构成重载是不可行的，必须还有<code>参数上的区别</code>。因为这样做编译器搞不明白你究竟想要使用的是哪个函数。<br>如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>;</span><br></pre></td></tr></table></figure><p>编译器到底该调哪一个呢？</p><h1 id="🐭c-如何支持函数重载"><a href="#🐭c-如何支持函数重载" class="headerlink" title="🐭c++如何支持函数重载"></a>🐭c++如何支持函数重载</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在c&#x2F;c++中，要想将一个程序跑起来，就需要经过如下的几个阶段 </p><blockquote><p>预处理，编译，汇编，链接<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD1.jpg'><br>图源王道2025操作系统讲义3.1</p></blockquote><p><code>预处理</code>是C++程序在编译过程中的第一步，它主要负责处理头文件、宏定义和条件编译等。在预处理阶段，预处理器会对<code>函数的声明</code>进行处理，通常，此文件是以<code>.i</code>为后缀。</p><p>编译器在<code>编译</code>阶段主要负责将源代码翻译成<code>汇编</code>代码。编译器通过分析源代码，将其转换为计算机可以理解的指令。汇编语言程序中的每条语句都以一种标准的文本格式确切的描述了一条低级机器语言指令。此时，文件后缀为<code>.s</code>。</p><p>在<code>汇编</code>阶段，编译器会将<code>汇编</code>代码翻译成<code>机器</code>代码。汇编器将<code>.s文件</code>翻译成机器语言指令，把这些指令打包成一种可重定位目标程序的格式，并将结果保存在目标文件<code>.o</code>中。<code>.o</code>文件是一个二进制文件，它的字节编码是机器语言指令而不是字符，如果我们在文本文件中打开<code>.o文件</code>，所呈现的就是一串串的乱码。在汇编阶段，会生成一份<code>符号表</code>（这个表很重要,每个目标文件都有一份符号表，可简单理解为函数或变量对应的实际内存地址）。</p><p>在<code>链接</code>阶段，编译器会将多个目标文件链接成一个可执行文件。</p><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/52ca90eb6e87f4b12c4dc7a7a4a2681.jpg'>图源《计算机系统基础》-袁春风(此图在软件层并未涉及到链接)<blockquote><p>(拓展)此图给出了实现两个相邻数组元素交换功能的不同层次语言的描述 。在高级语言源程序中，可直观地用三个赋值语句实现;在经<code>编译</code>后生成的汇编语言源程序中,可用4 个汇编指令 表 示 ， 其 中 ， 两 条 是 取 数 指 令 I w (l o a d w o r d )， 另 两 条 是 存 数 指 令 s w (s t o r e w o r d ); 在 经 汇编后生成的<code>机器语言程序</code>中，对应的机器指令是特定格式的二进制代码，例如，第一条Iw指令对应的机器代码为“1000 11000100 11110000000000000000”，这是一条MIPS体系结构中的指令，其中，高6位“100011” 为操作码，随后5位“00010” 为寄存器编号2，再后面5位 “01111” 为另一个寄存器编号，最后16位表示立即数0 。CPU能够通过<code>逻辑电路</code>直接执行这种<code>二进制表示的机器指令</code>。指令执行时通过控制器对指令操作码进行译码，解释成控制信号(control signal)控制数据通路执行，例如，控制信号ALUop&#x3D; add 可以控制ALU进行加法操作，RegWr&#x3D; 1 可以控制将结果写人寄存器。</p></blockquote><p>而要解释为何c++支持函数重载，就需要说一说<code>链接</code>阶段。</p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><blockquote><p>链接过程就是将<code>多个</code>输入目标文件(.o文件)加工合并成<code>一个</code>输出文件(<code>可执行</code>二进制文件)。在此阶段，可执行的二进制文件会对一些<code>符号</code>进行解析，调整一些地址。(注意：目标文件也是二进制，但操作系统并不允许直接执行！)</p></blockquote><ul><li>重点<br>比如在编译main文件时，有一个func函数(来自func文件)的声明，但编译器完全不知道他的存在！printf也是同理，虽然有#include &lt;stdio.h&gt;，但是在此头文件里也仅仅是一个<code>函数声明</code>。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这也就意味着具体代码是什么样，或者存放在哪个内存块都是编译器目前不知道的。那么没有办法，只有先把函数的<code>跳转地址设置为0</code>，等到链接阶段再去修正。(为了找到这些要修正的函数，会生成重定位表，存放函数地址的偏移量。)</p><blockquote><p>(扩展)重定位表（Relocation Table）：重定位表保存了程序中需要进行地址重定位的信息。在编译和链接过程中，代码和数据段的实际内存地址可能还未确定，因此在生成目标文件时，编译器会记录下哪些位置<code>需要在链接时进行修改</code>。</p></blockquote><p>所以链接其实就是将多个目标文件以及一些静态库等等组合成一个可执行文件。在此过程中还会进行地址修正等工作。</p><p>接下来用一个具体的例子来解释：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.c</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">foo</span><span class="params">()</span>; <span class="comment">// 声明外部函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> foo(); <span class="comment">// 调用外部函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译时生成的总符号表：</p><table><thead><tr><th>符号</th><th>类型</th><th>地址</th></tr></thead><tbody><tr><td>foo</td><td>函数</td><td>0x1000</td></tr><tr><td>bar</td><td>函数</td><td>0x2000</td></tr></tbody></table><p>bar里的重定位表</p><table><thead><tr><th>段</th><th>偏移</th><th>符号</th><th>操作</th></tr></thead><tbody><tr><td>.text.bar</td><td>0x04</td><td>foo</td><td>重定位</td></tr></tbody></table><p>在链接阶段，链接器会通过重定位表中的信息，将 b.c 中对 foo 的调用地址修改为 foo 在内存中的实际地址（假设是 0x1000）。</p><ul><li>注意：在不同的编译和链接阶段，符号表中的地址可能会有变化，尤其是在动态链接和加载的情况下。这里只是取简单情况进行分析。具体还要结合链接方式等情况来分析。</li></ul><p>如何在符号表里找到想要的函数，就需要借助命名规则。<br>Linux下的g++的命名规则最简单，常常修饰后变成【_Z+函数长度+函数名+类型首字母】。<br>c++存在这样的<code>函数名修饰</code>规则，而c没有，这就是c++可以实现重载的关键。</p><blockquote><p>规则规定：在 c++ 中，为了支持函数重载，编译器会对每个<code>函数名</code>进行<code>修饰</code>，从而生成<code>唯一的符号</code>来标识该函数。函数名修饰规则是由编译器定义的，不同的编译器可能会采用不同的修饰规则。Microsoft Visual C++ 编译器将函数名后面加上下划线和参数个数，参数类型和参数个数之间用 @ 分隔。例如，函数 void foo(int a, float b) 的修饰名为 _foo@8。</p></blockquote><p>如：<br><img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD4.png'></p><p>汇编阶段生成的符号表将会记录函数的<code>名称</code>与<code>地址</code>。</p><ul><li>若无函数名修饰规则，那么编译器只根据原始函数名来生成放在符号表中的函数名；如果有修饰规则，那么会将<code>形参个数，类型，顺序</code>也添加进考虑范围，以形成新的函数名。</li></ul><p>有一点需要注意，在编译的过程中，是<code>不会</code>执行用户的自定义函数的。</p><blockquote><p>在链接的阶段，链接器会解析<code>所有的符号</code>，并将被调用的函数的目标代码包含在可执行文件中。当我们在一个源文件中定义一个函数时，编译器会将该函数编译成目标代码，并在生成的目标文件中生成相应的符号。如果在其他源文件中<code>调用</code>了该函数，链接器会在链接阶段将相应的目标文件合并成一个可执行文件，并将<code>各个符号解析成实际的地址</code>，从而使得程序能够正确地执行。</p></blockquote><ul><li>所以c无法实现函数重载就是因为c没有像c++这样的修饰规则，而是仅仅以函数名来区分各函数。<img src='https://tuchuang-1317757279.cos.ap-chengdu.myqcloud.com/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD3.png'></li></ul><p>此时又会出现一个问题，如果在团队开发里，有人用c，有人用c++，那么此时在这种混合模式下开发，由于c和c++编译器对函数名字修饰规则不同，可能就会导致链接失败！<br>针对这样的问题，可以采取在函数前加extern “C”的办法，也就是告诉编译器将该函数按照c语言规则来编译。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 函数重载 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
